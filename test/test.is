; Copyright (c) 2016, Ganesh Prasad Sahoo <sir.gnsp@gmail.com>
 
; Testing whether the Ironscript implementation is working OK or not.
; This is a comment. And all comments should be ignored.
; PS Comments start with ';' and end with the newline.




_begin
  (_include "stdlib")
	(_rho (@a = @b) (_let @a @b) )

	(_echo (1:2))

	(_let sum-to-n (_fn (n) (_if (== n 0) 0 (+ n (sum-to-n (- n 1) ) ) ) ) )
	
	(_let sum-to-n-opt (_fn (n acc) (_if (== n 0) acc  (sum-to-n (- n 1) (+ n acc) ) ) ) ) 
	(_echo (sum-to-n 80) )



	(_let range (_fn (lower upper step)
		(_if (>= lower upper) 
			NIL
			(_cons lower (range (+ lower step) upper step) )
		)
	) )

	(_let one-to-ten (range 1 11 1) )
	(_echo one-to-ten)
	(_echo (_seq :one-to-ten))

	(_let list-comp (_fn (func list)
		(_if (not list)
			NIL
			(_begin
				(_let car (func (_car list) ) )
				(_cons car (list-comp func (_cdr list) ) )
			)
		)
	) )
	(_rho (list @funcbody for @iter in @list) (list-comp (_fn @iter @funcbody) @list) )
	(_rho (seq @funcbody for @iter in @list) (_ (_cons _seq [list @funcbody for @iter in @list] ) ) ) 

	(_echo (list-comp (_fn (x) (+ x 2) ) ( 1 2 3) ) )
	

	;(_echo [list (* x 2) for (x) in (range 1 100000 1) ] )
	
	(_echo [seq (* x x) for (x) in (range 1 10 1) ] )
	


	;(_rho (testing @a @b :rest) (_echo @a @b rest))
	
	(_rho (testing @a @b :@rest) (_echo @a @b :@rest))
	[testing (Anton Chekhov) (Leo Tolstoy) (Maxim Gorkey) (Jack Lonndon)]


	(_let mod (_import "./test1.is" (name) ) )
	(_echo mod.name)
	(_echo name)
	(_echo (_import _egg))

  ( @{
    //console.log(vdom);  
  }@ )

	
	(_echo (_cdr 1))
	[(p :q) = (1 2 3)]
	(_echo  q)
	

	[@a = (x y)]
	[(z :@a) = (1 2 3)]
	(_echo z x y )


	[(@a @b) = ((5 6) 7)]
	(_echo @a @b x y )




	(_def add-by-ref (_fn (@a @b) (+ @a @b)))
	(_echo (add-by-ref 100 10) )
  
  
  (_def a 1) 
	(_def b 3)
  (_echo a) 
  (_echo [+ a a])

	(_echo a b)
	[(a b) = (b a)]
	(_echo a b)

	[(head : tail) = (Ganesh Prasad Sahoo)]
	(_echo head tail)

  
  (_def twice (_fn (n) (+ n n)))
  (_echo (twice (+ 1 3)))

  
  
  (_def ! (_fn (n) 
    (_if (== n 0) 1 (* n (! (- n 1) ) ) ) 
  ))

	

  (_rho (@a + @b) (+ @a @b) )
  (_rho (@a + @b + @c) (+ [@a + @b] @c))
  
  (_self 1 + 2 + 3)
  (_echo (! 5))

  (_rho (@n !) (! @n) )
  (_echo [5 !])




  (_rho (say hello to @name) (_echo (concat "Hello " @name "! Have a nice day.")))
  (_rho (say bye to @name) (_echo (concat "Well " @name ", I got to go. Bye.")))
  
  (_def me "GNSP@GNEOS")

  [say hello to me]
  [say bye to me]




  (_rho (@a should be @b) (_echo (concat @#a " should be " @b " : " (_if (== @a @b) "passed" "failed" ) ) ) )

  [(+ 1 2) should be 3]
  [[5 !] should be 120]
  [(twice 8) should be 16]
  [(twice 4) should be 3]





  (_echo (_try (_def 1 1) (concat "caught error : " _err) ) )
  

	(_def variadic (_fn (a : b) b ) )
	(_echo (variadic 1 2 3 4 5 6 7 8 9) )
	(_echo (variadic 1 ) )


	(_def sum (_fn (arg1 : args) (_if args (+ arg1 (sum :args) )  arg1 ) ) ) 
	(_def sumjs @{
		var sum = 0;
		for (var i=0; i<args.length; i++) sum += args[i];
		$return (sum);
	}@ )
	

	(_echo (sum 1 2 3 4 5 ) )
	(_echo (sumjs 1 2 3 4 5) )

	(_let a (1 2 3 4 5) )
	(_echo (_seq :a) )

	(1 2 3)

	(_def cond (_fr (exp : exps) 
		(_if (_ (_car exp)) 
			(_ (_car (_cdr exp) ) )
			(_ (cond :exps) ) 
		)
	) )


	(_echo (cond 
		( (== 1 2) 1)
		( (== 2 2) 2)
		( (== 3 3) 3)
		( (== 3 1) 4)
	) )










  (_def multMod (_eval
    @[
      _begin
        (_rho '(@a * @b) (* @a @b))
        (_def myFunc (_fn (x) (_echo x)))
    ]@
  ))
  (_echo (multMod 2 * 3))




  (_import "./test1.is" _all)
  (_echo name)
  (_echo '( (IronScript is) quite ready))

  



  (_include "./testInclude.is")
  [does the include work ?]



  (@{ $scope.defc('testKey', 'Testing const interopTable'); }@)
  (@{ console.log($scope.getc('testKey')); }@)



  (_def myColl {
		[(.name .roll) = ("Ganesh" "112CS0558")]
  })

  (_echo myColl)

  (_echo myColl.name myColl.roll)
  (_def myColl.name "Ganesh Prasad")
  (_def myColl.contacts (_seq "9668588771" "9040117018"))

  (_echo myColl.name myColl.contacts.1)


  

  (_def clock {
    (_def seconds @{
      let s = args[0] || 1;
      let i = 1;
      let inter = setInterval (() => { $yield(i++); }, s*1000);
    }@)

    (_def .seconds-stream (_stream seconds 1))
  })


  (_def intervalfn @{ 
    let i = 0;
    $return (function (arg) {
      if (arg !== null && arg !== undefined) i++;
      if (i===args[0]) {
        i = 0;
        return arg;
      }
      return null;
    });
  }@ )

  (_def interval-stream (_fn (interval stream) (_stream (_fx (intervalfn interval) ) (stream) ) ) )

  




  ;(_echo (clock.seconds-stream))
  ;(_do (_on clock.seconds-stream (_echo (_pull clock.seconds-stream) ) ) )

  (_echo (_map (_seq 1 2 3) (_fn (x i) [i * x] ) ) )
  (_echo (_filter (_seq 1 2 3) (_fn (x) (% x 2) ) ) )


  (_def pass (_fn (x) NIL) )
  (_def message-port (_stream pass NIL) ) 

  (_do (_on message-port (_echo "Message >>> " (_pull message-port) ) ) )

  (_do (_on (interval-stream 5 clock.seconds-stream) (_push message-port "Hello") ) )


  (_def natstream @{ 
    let i = 1;
    setInterval (() => { $yield(i++); }, 1000);
   }@
  )
  
  (_def twiceNums (_stream * 2 (natstream)))
  (_def echoStream (_fn (stream) (_stream _echo (stream) ) ) )
  (_do (echoStream clock.seconds-stream))

