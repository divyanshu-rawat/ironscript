ironscript.runPackage("{\"config\":{\"main\":\"./test.is\",\"imports\":[{\"name\":\"vdom\",\"url\":\"./jsmodules/vdom.js\"}]},\"rootfs\":\"{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"root\\\",\\\"content\\\":[{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"include\\\",\\\"content\\\":[{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"stdlib\\\",\\\"content\\\":\\\"_sync\\\\n  (_include \\\\\\\"./_stdlib/operators\\\\\\\")\\\\n\\\"},{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"_stdlib\\\",\\\"content\\\":[{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"operators\\\",\\\"content\\\":\\\"; Copyright (c) 2016, Ganesh Prasad Sahoo <sir.gnsp@gmail.com>\\\\n \\\\n; IRONSCRIPT Standard Library (Operators.is)\\\\n; Implements the most used javascript operators for use in ironscript.\\\\n; Prefer _include at global-scope over _import in case of stdlib files.\\\\n\\\\n_sync\\\\n  \\\\n  (_def + @{ $return (args[0]+args[1]); }@ )\\\\n  (_def - @{ $return (args[0]-args[1]); }@ )\\\\n  (_def * @{ $return (args[0]*args[1]); }@ )\\\\n  (_def / @{ $return (args[0]/args[1]); }@ )\\\\n  (_def % @{ $return (args[0]%args[1]); }@ )\\\\n  \\\\n  (_def == @{ $return (args[0]==args[1]); }@ )\\\\n  (_def != @{ $return (args[0]!=args[1]); }@ )\\\\n  (_def === @{ $return (args[0]===args[1]); }@ )\\\\n  (_def !== @{ $return (args[0]!==args[1]); }@ )\\\\n\\\\n  (_def > @{ $return (args[0]>args[1]); }@ )\\\\n  (_def < @{ $return (args[0]<args[1]); }@ )\\\\n  (_def >= @{ $return (args[0]>=args[1]); }@ )\\\\n  (_def <= @{ $return (args[0]<=args[1]); }@ )\\\\n\\\\n  (_def && @{ $return (args[0]&&args[1]); }@ )\\\\n  (_def || @{ $return (args[0]||args[1]); }@ )\\\\n\\\\n  (_def concat @{ \\\\n    let s = '';\\\\n    for (let arg of args) s += arg;\\\\n    $return (s);\\\\n   }@ )\\\\n\\\\n  (_rho '(@a + @b) (+ @a @b))\\\\n  (_rho '(@a - @b) (- @a @b))\\\\n  (_rho '(@a * @b) (* @a @b))\\\\n  (_rho '(@a / @b) (/ @a @b))\\\\n  (_rho '(@a % @b) (% @a @b))\\\\n\\\\n  (_rho '(@a == @b) (== @a @b))\\\\n  (_rho '(@a != @b) (!= @a @b))\\\\n  (_rho '(@a === @b) (=== @a @b))\\\\n  (_rho '(@a !== @b) (!== @a @b))\\\\n  \\\\n  (_rho '(@a > @b) (> @a @b))\\\\n  (_rho '(@a < @b) (< @a @b))\\\\n  (_rho '(@a >= @b) (>= @a @b))\\\\n  (_rho '(@a <= @b) (<= @a @b))\\\\n  \\\\n  (_rho '(@a && @b) (&& @a @b))\\\\n  (_rho '(@a || @b) (|| @a @b))\\\\n\\\"}]}]},{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"bundle\\\",\\\"content\\\":[{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"test.is\\\",\\\"content\\\":\\\"; Copyright (c) 2016, Ganesh Prasad Sahoo <sir.gnsp@gmail.com>\\\\n \\\\n; Testing whether the Ironscript implementation is working OK or not.\\\\n; This is a comment. And all comments should be ignored.\\\\n; PS Comments start with ';' and end with the newline.\\\\n\\\\n_begin\\\\n  ( @{\\\\n    console.log(vdom.message);  \\\\n  }@ )\\\\n\\\\n  (_include \\\\\\\"stdlib\\\\\\\")\\\\n\\\\n  (_def a 1) \\\\n  (_echo a) \\\\n  (_echo (+ a a))\\\\n\\\\n  (_def twice (_fn (n) (+ n n)))\\\\n  (_echo (twice (+ 1 3)))\\\\n\\\\n  (_def ! (_fn (n) \\\\n    (_if (== n 0) 1 (* n (! (- n 1) ) ) ) \\\\n  ))\\\\n\\\\n  (_rho '(@a + @b) (+ @a @b))\\\\n  (_rho '(@a + @b + @c) (+ [@a + @b] @c))\\\\n  (_echo [1 + 2 + 3])\\\\n\\\\n  (_rho '(@n !) (! @n) )\\\\n  (_echo [5 !])\\\\n\\\\n\\\\n  (_rho '(say hello to @name) (_echo (concat \\\\\\\"Hello \\\\\\\" @name \\\\\\\"! Have a nice day.\\\\\\\")))\\\\n  (_rho '(say bye to @name) (_echo (concat \\\\\\\"Well \\\\\\\" @name \\\\\\\", I got to go. Bye.\\\\\\\")))\\\\n  \\\\n  (_def me \\\\\\\"GNSP@GNEOS\\\\\\\")\\\\n\\\\n  [say hello to me]\\\\n  [say bye to me]\\\\n\\\\n  (_rho '(@a should be @b) (_echo (concat @a \\\\\\\" should be \\\\\\\" @b \\\\\\\" : \\\\\\\" (_if (== @a @b) \\\\\\\"passed\\\\\\\" \\\\\\\"failed\\\\\\\" ) ) ) )\\\\n\\\\n  [(+ 1 2) should be 3]\\\\n  [[5 !] should be 120]\\\\n  [(twice 8) should be 16]\\\\n  [(twice 4) should be 3]\\\\n\\\\n\\\\n  (_def multMod (_eval\\\\n    @[\\\\n      _begin\\\\n        (_rho '(@a * @b) (* @a @b))\\\\n        (_def myFunc (_fn (x) (_echo x)))\\\\n    ]@\\\\n  ))\\\\n\\\\n  (_echo (multMod 2 * 3))\\\\n  (_def myFunc (_get multMod myFunc))\\\\n  (myFunc 5)\\\\n\\\\n\\\\n  (_import \\\\\\\"./test1.is\\\\\\\" _all)\\\\n  (_echo name)\\\\n\\\\n  (_echo '( (IronScript is) quite ready))\\\\n\\\\n  \\\\n  (_def natstream @{ \\\\n    let i = 1;\\\\n    setInterval (() => { $yield(i++); }, 1000);\\\\n   }@\\\\n  )\\\\n\\\\n  (@{ $scope.setc('testKey', 'Testing const interopTable'); }@)\\\\n  \\\\n  (_def twiceNums (_stream * 2 (natstream)))\\\\n  (_def echoStream (_fn (stream) (_stream _echo (stream) ) ) )\\\\n  (_do (echoStream twiceNums))\\\\n\\\\n\\\\n  (_include \\\\\\\"./testInclude.is\\\\\\\")\\\\n  [does the include work ?]\\\\n\\\\n  (@{ console.log($scope.getc('testKey')); }@)\\\\n\\\\n\\\\n\\\"},{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"test1.is\\\",\\\"content\\\":\\\"_begin\\\\n  (_include \\\\\\\"./testModules/module1.is\\\\\\\")\\\\n  (_def name \\\\\\\"IronScript\\\\\\\")\\\\n\\\"},{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"testModules\\\",\\\"content\\\":[{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"module1.is\\\",\\\"content\\\":\\\"_sync\\\\n  (_include \\\\\\\"./nestedTestModules/module2.is\\\\\\\")\\\\n  (_echo \\\\\\\"MODULE-1 inside testModules directory\\\\\\\")\\\\n\\\"},{\\\"type\\\":\\\"directory\\\",\\\"name\\\":\\\"nestedTestModules\\\",\\\"content\\\":[{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"module2.is\\\",\\\"content\\\":\\\"_sync\\\\n  (_echo \\\\\\\"module2 inside the nested testModules directory\\\\\\\")\\\\n\\\"}]}]},{\\\"type\\\":\\\"file\\\",\\\"name\\\":\\\"testInclude.is\\\",\\\"content\\\":\\\"_sync\\\\n  (_include \\\\\\\"./testModules/module1.is\\\\\\\")\\\\n  (_def ans \\\\\\\"yes\\\\\\\")\\\\n  (_rho '(does the include work ?) (_echo ans))\\\\n\\\"}]}]}\"}");